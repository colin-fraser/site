---
title: "Delving deeper into the data from a paper on AI poetry"
date: 2024-11-25
author: Colin Fraser
knitr: 
  opts_chunk: 
    echo: FALSE
---

```{r include = FALSE}
library(tidyverse)

df1 <- read_csv("data/Study 1 Discrimination Data.csv")

l1 <- c(
  "Strongly disagree",
  "Disagree",
  "Somewhat disagree",
  "Neither agree nor disagree",
  "Somewhat agree",
  "Agree",
  "Strongly agree"
)
l2 <- c(
  "Extremely bad",
  "Moderately bad",
  "Slightly bad",
  "Neither good nor bad",
  "Slightly good",
  "Moderately good",
  "Extremely good"
)
l3 <- c(
  "Terrible",
  "Very poor",
  "Poor",
  "Average",
  "Good",
  "Very good",
  "Excellent"
)
l4 <- c(
  "Terribly",
  "Very poorly",
  "Poorly",
  "Average",
  "Well",
  "Very well",
  "Extremely well"
)
l5 <- c(
  "Not at all",
  "Badly",
  "Well"
)
recoder <- function(x) {
  \(y) factor(x[y], x)
}

poem_ids <- tribble(
    ~ Poet, ~ poem_name,
    "Shakespeare", "Sonnet 31",
    "Emily Dickinson", "Come Slowlyâ€”Eden",
    "T.S. Eliot", "Conversation Galante",
    "Dorothea Lasky", "This Beautiful Planet",
    "Chaucer", "Rondel of Merciless Beauty"
)


df2 <- read_csv("data/Study 2 Assessment Data.csv") |> 
  mutate(
    across(c(theme, mood_emotion), recoder(l4), .names = "{.col}_fct"),
    across(c(rhythm, imagery, sound), recoder(l3), .names = "{.col}_fct"),
    across(c(moving, profound, witty, lyrical, inspiring, beautiful, meaningful, original), recoder(l1), .names = "{.col}_fct"),
    across(overall_quality, recoder(l2), .names = "{.col}_fct"),
    across(rhyme, recoder(l5), .names = "{.col}_fct")
  ) |> 
  left_join(poem_ids, by = "Poet") |> 
  mutate(poem_name = coalesce(poem_name, str_glue("(AI generated in the style of {Poet})")))

theme_set(ggthemes::theme_few())
```

[AI-generated poetry is indistinguishable from human-written poetry and is rated more favorably](https://www.nature.com/articles/s41598-024-76900-1) by Brian Porter & Edouard Machery, published about two weeks ago in Scientific Reports, summarizes a pair of experiments that examines how well non-expert readers differentiate poetry and generative text. From the abstract:

> We conducted two experiments with non-expert poetry readers and found that participants performed below chance levels in identifying AI-generated poems 46.6% accuracy. Notably, participants were more likely to judge AI-generated poems as human-authored than actual human-authored poems. We found that AI-generated poems were rated more favorably in qualities such as rhythm and beauty, and that this contributed to their mistaken identification as human-authored. Our findings suggest that participants employed shared yet flawed heuristics to differentiate AI from human poetry: the simplicity of AI-generated poems may be easier for non-experts to understand, leading them to prefer AI-generated poetry and misinterpret the complexity of human poems as incoherence generated by AI.

One great thing about this paper is they've made all of [the data publicly available](https://osf.io/by4cg/files/osfstorage).

I believe one important thing to emphasize is that the 7-point scale on which respondents rated their subjective assessments ranges from some variation *bad* to *good*. For example, they are asked to "rate the overall quality of this poem" and given choices Extremely bad, Moderately bad, Slightly bad, Neither good nor bad, Slightly good, Moderately good, and Extremely good. The way that participants respond to each question varies quite starkly by poem authorship.

```{r}
library(rlang)
question_plot <- function(data, col, question_text, sep_by = Authorship, facet_by = NULL, xlabel_include = NULL, all_levels_in_caption = TRUE, wrap_caption=100) {
  levs <- levels(pull(data, {{ col }}))
  if (is.null(xlabel_include)) {
    if (length(levs) %% 2 == 0) {
      xlabel_include <- 1:length(levs)
    } else {
      xlabel_include <- c(1, (length(levs) + 1)/2, length(levs))
    }
  }
  labeller <- \(x) {
    ifelse (
      x %in% levs[xlabel_include],
      str_glue('"{x}"'),
      ''
    )
  }
  p <- data |> 
    count({{ col }}, {{ sep_by }}, {{ facet_by }}) |> 
    group_by({{ sep_by }}, {{ facet_by }}) |> 
    mutate(freq = n / sum(n))
  p <- p |> 
    ggplot(aes(x = {{ col }}, y = n, fill = {{ sep_by }})) +
    geom_col(position = position_dodge(width = .9)) +
    geom_text(aes(label = str_glue("{n} ({scales::percent(freq, accuracy = 1)})")), position = position_dodge(width = .9), size = 2,
              vjust = -.1) +
    scale_x_discrete(labels = labeller, breaks = levs[xlabel_include]) +
    labs(x = str_glue('"{question_text}"'), y = "Responses")
  if (!rlang::quo_is_null(enquo(facet_by))) {
    p <- p + facet_wrap(vars({{ facet_by }}))
  }
  if (all_levels_in_caption) {
    p <- p + labs(caption = str_wrap(str_glue("All levels: {paste(paste0('\"', levs, '\"'), collapse = ', ')}"), wrap_caption)) +
      theme(plot.caption.position = 'plot', plot.caption = element_text(hjust=0))
  }
  p
}
df2 |> 
  filter(condition == 'nothing') |> 
  question_plot(overall_quality_fct, sep_by = Authorship, facet_by = NULL, question_text = "Rate the overall quality of this poem") +
  labs(title = "Distribution of subjective poem quality by poem origin", fill = 'Origin')
```

What's stark to me here is how much more likely respondents were to *hate* the human poems, compared to the AI poems.

```{r}
library(gt)
df2 |> 
  group_by(authorship = ifelse(Authorship == 'AI', 'AI poems', 'Human poems'),
           author = ifelse(Authorship == 'AI', 'AI', Poet),
           poem = ifelse(Authorship == "AI",
                         str_glue("({Poet}-style poem)"), 
                         str_glue("{Poet}: *{poem_name}*")),
           condition) |> 
  summarise(pct_dislike = mean(overall_quality <= 3), 
            pct_like = mean(overall_quality >= 5),
            n = n()) |> 
  mutate(across(c(pct_like, pct_dislike), \(x) weighted.mean(x, n), .names = "{.col}_overall")) |> 
  select(-n) |> 
  pivot_wider(names_from = c(condition), values_from = c(pct_dislike, pct_like)) |> 
  arrange(desc(pct_like_overall)) |> 
  gt(groupname_col = "authorship", rowname_col = "poem", row_group_as_column = TRUE) |> 
  tab_stubhead("Poem") |> 
  cols_hide("author") |> 
  tab_header("\"Overall Quality\" ratings by treatment") |> 
  tab_spanner(md('"Overall quality (extremely/moderately/slightly) **good**"'), starts_with("pct_like")) |> 
  tab_spanner(md('"Overall quality (extremely/moderately/slightly) **bad**"'), starts_with("pct_dislike")) |> 
  cols_label_with(matches("AI|human"), \(x) str_c("Participant told origin is ", str_extract(x, "[a-zA-Z]+$"))) |> 
  cols_label_with(ends_with("nothing"), \(x) str_c("Participant not told origin")) |> 
  cols_label_with(ends_with("overall"), \(x) "Overall") |> 
  cols_move(pct_like_overall, pct_like_nothing) |> 
  cols_move(pct_dislike_overall, pct_dislike_nothing) |> 
  fmt_percent(decimals = 1) |> 
  fmt_markdown(poem) |> 
  cols_label(poem = "") |> 
  summary_rows(fns = list(Overall ~ mean(.)), fmt = ~fmt_percent(., decimals = 1),
               columns = where(is.numeric)) |> 
  tab_options(table.font.size = px(12), quarto.use_bootstrap = FALSE, quarto.disable_processing = TRUE) |> 
  tab_style(
    style = list(
      "
        transform: rotate(180deg);
        writing-mode: vertical-rl;
        text-align: center;
        font-weight: bold;
        "
    ),
    locations = cells_row_groups()
  ) |> 
  cols_width(poem ~ px(300)) |> 
  tab_style(cell_text(weight = 'bold'), 
            cells_summary()) |> 
  tab_style(cell_text(weight = 'bold'), 
            cells_stub_summary()) |> 
  tab_style(cell_text(weight = 'bold'), 
            cells_body(ends_with("overall"))) |> 
  tab_style(cell_text(weight = 'bold'), cells_column_labels(ends_with("overall")))
```

```{r}
df2 |> 
  group_by(author = ifelse(Authorship == 'AI', '', Poet),
           poem = ifelse(Authorship == 'AI', poem_name, str_glue("{Poet}: *{poem_name}*")),
           condition) |> 
  summarise(dislike = mean(overall_quality <= 3), 
            like = mean(overall_quality >= 5),
            n = n()) |> 
  select(-n) |> 
  gather(attitude, percent, dislike, like) |> 
  spread(condition, percent) |> 
  group_by(author, poem) |>
  mutate(baseline_like = nothing[2]) |> 
  ggplot(aes(x = nothing, y = poem)) +
  geom_point(aes(color = "No authorship information"), shape = 17, position = position_nudge(y = -.3)) +
  geom_segment(aes(xend = human, color = "Told poem is human-authored"), arrow = arrow(type = 'closed', length = unit(0.1, "cm"))) +
  geom_segment(aes(xend = AI, color = "Told poem is AI-generated"), arrow = arrow(type = 'closed', length = unit(0.1, "cm"))) +
  theme(legend.position = 'inside', legend.position.inside = c(.98, .98), panel.grid.major = element_line(color = 'grey90'),
        legend.justification = c('right', 'top'), legend.box.background = element_rect(), legend.text = element_text(size = 6),
        legend.title = element_text(size= 8), plot.title.position = "plot", 
        axis.text.y = ggtext::element_markdown(), strip.text = ggtext::element_markdown()) +
  labs(y = NULL, color = "Treatment", title = "Treatment effects on participant opinion of \"overall poem quality\"",
       x = "% of responses") +
  facet_wrap(vars(attitude), ncol=1, labeller = as_labeller(c("like" = "\"(extremely/moderately/slightly) **good**\"",
                                                              "dislike" = "\"(extremely/moderately/slightly) **bad**\""))) +
  scale_x_continuous(labels = scales::percent, breaks = (0:10)/10) +
  scale_color_manual(values = c("Black", "firebrick", "forestgreen")) 
```

Let's look at the most disliked poem in the bunch.

> **Promised Years**\
> *By Dorothea Lasky*\
> \
> Please tell me that I was a good child\
> And that I did everything right\
> And that the atmosphere was exactly certain\
> I want you to love me\
> In ways that you never have\
> So that I become a forgotten world\
> With rainbow sunrises over dark green trees\
> And the cooling of the day\
> Becomes normal again\
> We will sit and watch the body of water\
> That we once called a sort of death\
> You know even in my dreams\
> You say Iâ€™ll never get it right\
> This is not a dream\
> We are burning here with no escape\
> But no matter how many times\
> They talk about the moon\
> It does not take a poet\
> To know that the moon\
> Is still only an illusion\
> Only an illusion\
> The moon calls out to all of us\
> Come back, it says\
> But we donâ€™t hear it\
> Already on our way\
> To somewhere

```{r}
df1 |> 
  filter(Poet == "Dorothea Lasky", poem_ID == 9, correct == 0, !is.na(explain)) |> 
  arrange(desc(confidence)) |> 
  select(explain, confidence, `Like poetry`) |> 
  slice(1:10) |> 
  gt()
```



And the most liked poem, the AI-generated Walt Whitman imitation.

> I hear the call of nature, the rustling of the trees,\
> The whisper of the river, the buzzing of the bees,\
> The chirping of the songbirds, and the howling of the wind,\
> All woven into a symphony, that never seems to end.\
> \
> I feel the pulse of life, the beating of my heart,\
> The rhythm of my breathing, the soul's eternal art,\
> The passion of my being, that burns with fervent fire,\
> The urge to live, to love, to strive, to reach up higher.\
> \
> I see the beauty all around, the glory of the earth,\
> The majesty of mountains, the miracles of birth,\
> The wonder of the cosmos, the mysteries of the stars,\
> The poetry of existence, that echoes near and far.\
> \
> I taste the sweetness of the fruits, the flavor of the land,\
> The spice of human culture, the richness of the hand,\
> The diversity of life, the many paths we take,\
> The quest for understanding, that never seems to break.\
> \
> Oh, how I revel in this world, this life that we are given,\
> This tapestry of experiences, that shapes us into living,\
> And though I may depart, my spirit will still sing,\
> The song of life eternal, that flows through everything.\

```{r}
df1 |> 
  filter(Poet == "Walt Whitman", poem_ID == 2, correct == 0, !is.na(explain)) |> 
  arrange(desc(confidence)) |> 
  select(explain, confidence, `Like poetry`) |> 
  slice(1:10) |> 
  gt()
```


